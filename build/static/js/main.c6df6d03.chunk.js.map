{"version":3,"sources":["component/Board/Store/AddContentStore.jsx","RootStore.jsx","component/Board/addContent/AddPhotoComp.jsx","component/Board/addContent/AddTextComp.jsx","component/Board/addContent/DisplayPhotoComp.jsx","component/Board/addContent/AddContentComp.jsx","App.js","reportWebVitals.js","index.js"],"names":["AddContentStore","makeAutoObservable","content","text","setText","value","this","images","setImage","push","deleteImage","pop","RootStore","AddPhotoComp","observer","Label","styled","label","htmlFor","id","name","type","accept","multiple","hidden","onChange","e","preventDefault","files","target","Object","values","file","reader","FileReader","onload","imageSrc","result","readAsDataURL","AddTextComp","Textarea","textarea","placeholder","rows","autoFocus","onInput","tag","document","querySelector","clientHeight","scrollHeight","style","height","maxLength","DisplayPhotoComp","editable","PreviewImgs","div","PreviewImg","img","handleOnMouseOver","filter","generateImg","map","idx","className","src","onPointerOver","AddContentComp","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"2KAEMA,EAAkBC,YAAmB,CAEvCC,QAAS,CAELC,KAAM,GACNC,QAHK,SAGGC,GACJC,KAAKH,KAAOE,GAGhBE,OAAQ,GACRC,SARK,SAQIH,GACLC,KAAKC,OAAOE,KAAKJ,IAErBK,YAXK,SAWOL,GACRC,KAAKC,OAAOI,IAAIN,OCRbO,EANG,WAEd,MAAO,CAAEZ,oB,kICAb,IA+Dea,EA/DMC,aAAS,WAAO,IAG3BZ,EADsBU,IAApBZ,gBACwBE,QAE1Ba,EAAQC,IAAOC,MAAV,KAwCX,OACI,qCACI,cAACF,EAAD,CACIG,QAAQ,cADZ,gCAIA,uBACIC,GAAG,cACHC,KAAK,QACLC,KAAK,OACLC,OAAO,SACPC,UAAQ,EACRC,QAAM,EACNC,SA9CU,SAACC,GAEnBA,EAAEC,iBAIF,IAFA,IAAIC,EAAQF,EAAEG,OAAOD,MAErB,MAAmBE,OAAOC,OAAOH,GAAjC,eAAyC,CAApC,IAAMI,EAAI,KAELC,EAAS,IAAIC,WAEnBD,EAAOE,OAAS,SAACT,GAEb,IAAMU,EAAWV,EAAEG,OAAOQ,OAC1BnC,EAAQM,SAAS4B,IAYrBH,EAAOK,cAAcN,a,mJCrCjC,IAyCeO,EAzCKzB,aAAS,WAAO,IAG1BZ,EADsBU,IAApBZ,gBACwBE,QAE1BsC,EAAWxB,IAAOyB,SAAV,KAuBd,OACQ,cAACD,EAAD,CACIpB,KAAK,OACLD,GAAG,gBACHuB,YAAY,4DACZC,KAAK,IACLC,WAAS,EACTC,QAtBO,WAEf,IAAMC,EAAMC,SAASC,cAAc,kBAE7BF,EAAIG,eAAiBH,EAAII,cAAkBJ,EAAII,aAAe,IAEhEJ,EAAIK,MAAMC,OAASN,EAAII,aAAe,KAItCJ,EAAIO,UAAY,KAaZ5B,SAAW,SAAAC,GAAC,OAAIxB,EAAQE,QAAQsB,EAAEG,OAAOxB,a,6RCpCzD,IA6CeiD,EA7CUxC,aAAS,YAA6B,IAAD,IAAxByC,gBAAwB,SAGpDrD,EADsBU,IAApBZ,gBACwBE,QAE1BsD,EAAcxC,IAAOyC,IAAV,KASXC,EAAa1C,IAAO2C,IAAV,KAMVC,EAAoB,SAAClC,GAEvB,IAAMyB,EAAQzB,EAAEG,OAAOsB,MAEnBI,IAEAJ,EAAMU,OAASV,EAAMU,OAAS,GAAKV,EAAMU,OAAS,oBAMpDC,EAAc5D,EAAQK,OAAOwD,KAAI,SAACrC,EAAGsC,GACvC,OAAO,cAACN,EAAD,CAAsBO,UAAU,gBAAgBC,IAAKxC,EAAGyC,cAAeP,GAAtDI,MAG5B,OACI,mCACI,cAACR,EAAD,UACKM,SCvBFM,EAhBQ,WAEnB,OACI,qCACI,mCACI,cAAC,EAAD,CAAkBb,UAAU,MAEhC,qCACI,cAAC,EAAD,IACA,cAAC,EAAD,WCCDc,MAZf,WAEE,OAEE,mCACE,cAAC,EAAD,OCKSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFlC,SAASmC,eAAe,SAM1BZ,M","file":"static/js/main.c6df6d03.chunk.js","sourcesContent":["import { makeAutoObservable } from 'mobx';\r\n\r\nconst AddContentStore = makeAutoObservable({\r\n\r\n    content: {\r\n\r\n        text: '',\r\n        setText(value) {\r\n            this.text = value;\r\n        },\r\n\r\n        images: [],\r\n        setImage(value) {\r\n            this.images.push(value);\r\n        },\r\n        deleteImage(value) {\r\n            this.images.pop(value)\r\n        }\r\n\r\n    }\r\n\r\n});\r\n\r\nexport { AddContentStore };","import { AddContentStore } from './component/Board/Store/AddContentStore';\r\n\r\nconst RootStore = () => {\r\n\r\n    return { AddContentStore }\r\n\r\n};\r\n\r\nexport default RootStore;","import { observer } from 'mobx-react';\r\nimport RootStore from '../../../RootStore';\r\nimport styled from 'styled-components';\r\n\r\nconst AddPhotoComp = observer(() => {\r\n\r\n    const { AddContentStore } = RootStore();\r\n    const content = AddContentStore.content;\r\n\r\n    const Label = styled.label`\r\n\r\n        width: 30vw;\r\n        height: 5vh;\r\n\r\n    `;\r\n\r\n    const handleOnFiles = (e) => {\r\n\r\n        e.preventDefault();\r\n\r\n        let files = e.target.files;\r\n\r\n        for (const file of Object.values(files)) {\r\n\r\n            const reader = new FileReader();\r\n\r\n            reader.onload = (e) => {\r\n                \r\n                const imageSrc = e.target.result;\r\n                content.setImage(imageSrc);\r\n\r\n                // const tags = document.getElementsByClassName('preview-image');\r\n                // for (const [_, tag] of Object.entries(tags)) {\r\n\r\n\r\n\r\n                // };\r\n\r\n\r\n\r\n            }\r\n            reader.readAsDataURL(file);\r\n            \r\n\r\n        };\r\n\r\n\r\n    }\r\n\r\n    return (\r\n        <>  \r\n            <Label\r\n                htmlFor=\"img-uploads\">\r\n                    아이콘\r\n            </Label>            \r\n            <input\r\n                id=\"img-uploads\"\r\n                name=\"image\"\r\n                type=\"file\"\r\n                accept=\"imgaes\"\r\n                multiple\r\n                hidden\r\n                onChange={handleOnFiles} />\r\n        </>\r\n    )\r\n});\r\n\r\nexport default AddPhotoComp;","import { observer } from 'mobx-react';\r\nimport RootStore from '../../../RootStore';\r\nimport styled from 'styled-components';\r\n\r\nconst AddTextComp = observer(() => {\r\n\r\n    const { AddContentStore } = RootStore();\r\n    const content = AddContentStore.content;\r\n\r\n    const Textarea = styled.textarea`\r\n\r\n        resize: none;\r\n        width: 60vw;\r\n        height: 15vh;\r\n\r\n    `;\r\n\r\n    const growHeight = () => {\r\n\r\n        const tag = document.querySelector('#body-textarea');\r\n\r\n        if ( (tag.clientHeight !== tag.scrollHeight) && (tag.scrollHeight < 200) ) {\r\n            \r\n            tag.style.height = tag.scrollHeight + \"px\";\r\n\r\n        } else {\r\n            \r\n            tag.maxLength = 300\r\n\r\n        }\r\n    };\r\n\r\n    return (\r\n            <Textarea\r\n                name=\"body\"\r\n                id=\"body-textarea\"\r\n                placeholder=\"오늘 하루는 어땠나요?\"\r\n                rows=\"5\"\r\n                autoFocus\r\n                onInput={growHeight}\r\n                onChange={ e => content.setText(e.target.value) }\r\n                />\r\n    );\r\n});\r\n\r\nexport default AddTextComp;","import { observer } from 'mobx-react';\r\nimport RootStore from '../../../RootStore';\r\nimport styled from 'styled-components';\r\n\r\nconst DisplayPhotoComp = observer(( { editable = false } ) => {\r\n    \r\n    const { AddContentStore } = RootStore();\r\n    const content = AddContentStore.content;\r\n\r\n    const PreviewImgs = styled.div`\r\n\r\n        width: 80vw;\r\n        height: 15vh;\r\n        white-space: nowrap;\r\n        overflow-x: scroll;\r\n\r\n    `;\r\n\r\n    const PreviewImg = styled.img`\r\n\r\n        height: 100%;\r\n\r\n    `;\r\n\r\n    const handleOnMouseOver = (e) => {\r\n        \r\n        const style = e.target.style;\r\n\r\n        if (editable) {\r\n            \r\n            style.filter ? style.filter = \"\" : style.filter = \"grayscale(100%)\";\r\n\r\n        }\r\n\r\n    };\r\n\r\n    const generateImg = content.images.map((e, idx) => {\r\n        return <PreviewImg key={idx} className=\"preview-image\" src={e} onPointerOver={handleOnMouseOver}/>\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <PreviewImgs>\r\n                {generateImg}\r\n            </PreviewImgs>\r\n        </>\r\n    );\r\n});\r\n\r\nexport default DisplayPhotoComp;","import AddPhotoComp from './AddPhotoComp';\r\nimport AddTextComp from './AddTextComp';\r\nimport DisplayPhotoComp from './DisplayPhotoComp';\r\n\r\nconst AddContentComp = () => {\r\n\r\n    return (\r\n        <>\r\n            <>\r\n                <DisplayPhotoComp editable={true} />\r\n            </>\r\n            <>\r\n                <AddTextComp />\r\n                <AddPhotoComp />\r\n            </>\r\n        </>\r\n    );\r\n\r\n};\r\n\r\nexport default AddContentComp;","import AddContentComp from './component/Board/addContent/AddContentComp';\n\nfunction App() {\n\n  return (\n\n    <>\n      <AddContentComp />\n    </>\n\n  );\n  \n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}